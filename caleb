#! /usr/bin/env python

import requests
import sys
import logging


def parse_string(s):
    pieces = s.split(':')
    payload = dict(zip(['au', 'ti', 'year'], pieces))
    payload['format'] = 'bibtex'
    return payload


def get_bibtex(s):
    payload = parse_string(s)
    r = requests.get('https://mathscinet.ams.org/mrlookup', params=payload)
    output = r.text

    return output.split('<pre>')[1].split('</pre>')[0].strip('\n')


def parse_bib(filename):
    all_entries = set()
    try:
        with open(filename, 'r') as f:
            for line in f:
                if line.startswith("@"):
                    all_entries.add(line.split('{', 1)[1].split(',', 1)[0])
    except FileNotFoundError:
        pass
    return all_entries


def parse_aux(filename):
    with open(filename, "r") as f:
        citations = set()
        for line in f:
            if line.startswith("\\citation{"):
                citation = line[10:-2]
                if citation.count(':'):
                    citations.add(citation)
    return citations


def append_missing(missing_cits, bib_file):
    with open(bib_file, "a") as f:
        for m in missing_cits:
            logging.info("Working on {}".format(m))

            new_entry = get_bibtex(m)

            logging.info("Inputing {}".format(new_entry))
            if not new_entry:
                continue
            # replace citation identifier with m
            a, b = new_entry.split('{', 1)
            formatted = a + '{' + m + ',' + b.split(',', 1)[1]

            # write to bib file
            f.write('\n')
            f.write(formatted)
            f.write('\n')


def main():
    name = sys.argv[1]
    logging.basicConfig(level=logging.INFO)

    aux_file = name + ".aux"
    logging.info(".aux file: {}".format(aux_file))

    bib_file = name + ".bib"
    logging.info(".bib file: {}".format(bib_file))

    citations = parse_aux(aux_file)
    existing_bibs = parse_bib(bib_file)

    missing_cits = citations.difference(existing_bibs)
    logging.info("Number of missing citations: {}".format(len(missing_cits)))
    logging.info("Missing citations: {}".format(missing_cits))

    if missing_cits:
        append_missing(missing_cits, bib_file)


if __name__ == "__main__":
    main()
